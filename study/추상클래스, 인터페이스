추상 클래스란
  - class 앞에 'abstract' 키워드를 사용하여 정의하며, 하나 이상의 추상 메서드를 가지는 클래스
      추상 메서드를 선언하여 상속을 통해서 하위 클래스에서 구현하도록 강제하는 클래스
  - 하나 이상의 추상 메서드를 가지고 있는 클래스를 말하며, 추상 메서드를 포함하고 있다는 점을 제외하면
      일반 클래스와 모든 점이 동일(생성자, 필드(멤버 변수), 일반 메서드(멤버 메서드) 포함 가능)
  - 추상 클래스는 인스턴스, 즉 객체를 만들 수 없는 클래스(new 키워드로 객체 생성 불가)
  - 추상 클래스는 상속 키워드로 extends를 사용(일반 클래스 상속과 동일)
  - 추상 메소드는 (추상 클래스를 상속받는)하위 클래스에서 메소드 구현을 강제(Override)
  - 추상 메소드를 포함하는 클래스는 반드시 추상 클래스여야 한다
  - 다중 상속이 불가능

인터페이스란
  - 'interface' 키워드를 사용하여 정의하며, 오직 추상 메서드와 상수(static final)만을 가지고 있는 것을 인터페이스라고 한다.
      추상 클래스와 마찬가지로 인터페이스 또한 인터페이스의 선언되어있는 추상 메서드를 implements 하는 클래스에서 (반드시) 구현하도록 강제한다.
  - 인터페이스의 모든 멤버 변수는 public static final이어야 하며, 이를 생락할 수 있다.
  - 인터페이스의 모든 메서드는 public abstract이어야 하며, 이를 생략할 수 있다.
  - Java8부터는 static, default method를 사용할 수 있다.
  - 인터페이스는 상속 키워드로 implements를 사용한다.
  - 다중 상속이 가능

==========================================================================================================
==========================================================================================================

공통점
1. 객체 생성 : 객체를 생성(인스턴스) 할 수 없다.
2. 추상 메서드 : 추상 메서드를 포함한다.
3. 기능적 목적 : 상속받는 클래스에서는 추상 메서드를 반드시 재정의하여 구현해야 한다.

차이점
1. 개념적 목적
  - 추상 클래스 : 상속 받아서 기능을 확장시키는데 목적
  - 인터페이스  : 구현 객체의 동일한 실행 기능을 보장하기 위한 목적
2. 클래스
  - 추상 클래스 : 클래스다.(abstract class)
  - 인터페이스  : 클래스가 아니다.(interface)
3. 일반 메서드
  - 추상 클래스 : 일반 메서드 정의가 가능
  - 인터페이스  : 일반 메서드 정의 불가능(Java8 이후 static, default메서드 정의 가능)
4. 멤버 변수
  - 추상 클래스 : 클래스와 동일하게 변수 선언 및 사용 가능
  - 인터페이스  : 상수만 사용 가능
5. 상속 키워드
  - 추상 클래스 : extends
  - 인터페이스  : implements
6. 다중 상송
  - 추상 클래스 : 불가능
  - 인터페이스  : 가능

개념적 차이점이 아닌 실제 적용하는 것에서 차이점을 생각해보면,
추상 클래스는 extends(기능 확장의 느낌) 키워드 그대로 자신의 기능들을 하위로 확장시키는 것
인터페이스는 implements(실행하는 기능 구현의 느낌) 키워드처럼 인터페이스에 정의된 메서드를 각 클래스의 목적에 맞게 동일한 기능으로 구현하는 것


*** 추상 메서드 : 구현부 없이 선언부만 가지고 있는 멤버 메서드
abstract class Animal {
	// 숨쉬기(일반 메서드(선언부 + 구현부 존재)
	void breath() {
		System.out.println("숨쉬기");
	}

	// 울음소리(추상 메서드(선언부만 존재)
	abstract void cry();
}

interface Flyable {
	// 날기(추상 메서드(선언부만 존재)
	void fly();
}

*** 독립적으로 객체를 생성할 수 없다
Animal animal = new Animal(); // ERROR, 'Animal' is abstract; cannot be instantiated
Flyable flyable = new Flyable(); // ERROR, 'Flyable' is abstract; cannot be instantiated




https://hahahoho5915.tistory.com/70
